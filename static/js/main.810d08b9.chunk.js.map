{"version":3,"sources":["redux/reducers/toggleTheme.tsx","redux/reducers/index.tsx","redux/actionTypes.tsx","redux/store.tsx","component/MyWork.tsx","component/ThemeSwitch.tsx","redux/actions.tsx","component/Main.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","isDarktheme","window","matchMedia","matches","rootReducer","combineReducers","toggleTheme","state","action","type","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","useStyles","makeStyles","root","width","textAlign","marginBottom","title","content","display","color","MyWork","classes","Card","className","CardContent","Typography","variant","component","CardActions","Link","href","underline","Button","size","theme","createStyles","switch","ThemeSwitch","useSelector","dispatch","useDispatch","Switch","checked","inputProps","onClick","drawer","breakpoints","up","flexShrink","appBar","backgroundColor","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","flexGrow","padding","ResponsiveDrawer","props","container","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","App","createMuiTheme","palette","main","lightBlue","A400","secondary","pink","A200","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.810d08b9.chunk.js","sourcesContent":["import { TOGGLE_THEME, ToggleThemeTypes } from './../actionTypes';\n\nconst initialState = {\n    isDarktheme: window.matchMedia('(prefers-color-scheme: dark)').matches ? true : false,\n}\n\nexport default function (state = initialState, action: ToggleThemeTypes) {\n    switch (action.type) {\n        case TOGGLE_THEME: {\n            return {\n                isDarktheme: !state.isDarktheme,\n            };\n        }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport toggleTheme from './toggleTheme';\n\nexport const rootReducer = combineReducers({ toggleTheme: toggleTheme });\nexport type RootState = ReturnType<typeof rootReducer>\n","export const TOGGLE_THEME = \"TOGGLE_THEME\";\n\ninterface ToggleThemeAction {\n    type: typeof TOGGLE_THEME,\n};\n\nexport type ToggleThemeTypes = ToggleThemeAction;","import { createStore, compose } from 'redux';\nimport { rootReducer } from './reducers';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers())\n\nexport default store;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        textAlign: 'left',\n        marginBottom: 14,\n    },\n    title: {\n        marginBottom: 14,\n    },\n    content: {\n        display: 'inline-block',\n        color: \"textSecondary\",\n    },\n});\n\nconst MyWork: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} variant=\"h5\" component=\"h2\">\n                        DP Visualizer\n                </Typography>\n                    <Typography className={classes.content} variant=\"body2\" component=\"p\">\n                        ナップサック問題のDPテーブルの更新をJSで可視化したやつ。\n                </Typography>\n                </CardContent>\n                <CardActions>\n                    <Link href=\"https://yokotani92.github.io/dp-visualizer/\" underline='none'>\n                        <Button size=\"small\">VIEW</Button>\n                    </Link>\n                </CardActions>\n            </Card>\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} variant=\"h5\" component=\"h2\">\n                        React-Reduxのstarter\n                    </Typography>\n                    <Typography className={classes.content} variant=\"body2\" component=\"p\">\n                        React-Reduxを使ったCount up/ downボタン。\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Link href=\"https://yokotani92.github.io/react-redux-starter-app/\" underline='none'>\n                        <Button size=\"small\">VIEW</Button>\n                    </Link>\n                </CardActions>\n            </Card>\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} variant=\"h5\" component=\"h2\">\n                        react-three-fiberを使ったページのテスト\n                    </Typography>\n                    <Typography className={classes.content} variant=\"body2\" component=\"p\">\n                        react-three-fiberのサンプルを動かしてみただけ。面白い。\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Link href=\"https://yokotani92.github.io/react-three-trial/\" underline='none'>\n                        <Button size=\"small\">VIEW</Button>\n                    </Link>\n                </CardActions>\n            </Card>\n        </div >\n    );\n}\n\nexport default MyWork;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../redux/reducers';\nimport Switch from '@material-ui/core/Switch';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { toggleTheme } from '../redux/actions';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        switch: {\n            textAlign: 'right',\n            display: 'inline-block'\n        },\n    }),\n);\n\nconst ThemeSwitch: React.FC = () => {\n    const isDarktheme = useSelector<RootState, boolean>(state => state.toggleTheme.isDarktheme);\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.switch}>\n            <Switch\n                checked={isDarktheme}\n                color=\"default\"\n                inputProps={{ 'aria-label': 'checkbox with default color' }}\n                onClick={() => dispatch(toggleTheme())}\n            />\n        </div>\n    );\n}\n\nexport default ThemeSwitch;","import { TOGGLE_THEME } from './actionTypes';\n\nexport const toggleTheme = () => ({\n    type: TOGGLE_THEME,\n});","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport MyWork from './MyWork';\nimport ThemeSwitch from './ThemeSwitch';\nimport Link from '@material-ui/core/Link';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        drawer: {\n            [theme.breakpoints.up('sm')]: {\n                width: drawerWidth,\n                flexShrink: 0,\n            },\n        },\n        appBar: {\n            color: 'inherit',\n            backgroundColor: 'default',\n            [theme.breakpoints.up('sm')]: {\n                width: `calc(100% - ${drawerWidth}px)`,\n                marginLeft: drawerWidth,\n            },\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        },\n        // necessary for content to be below app bar\n        toolbar: theme.mixins.toolbar,\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n        },\n    }),\n);\n\ninterface ResponsiveDrawerProps {\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    container?: any;\n}\n\nexport default function ResponsiveDrawer(props: ResponsiveDrawerProps) {\n    const { container } = props;\n    const classes = useStyles();\n    const theme = useTheme();\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    const drawer = (\n        <div>\n            <div className={classes.toolbar} />\n            <Divider />\n            <List>\n                <Link href=\"https://github.com/yokotani92\" underline='none' color='inherit'>\n                    <ListItem button>\n                        <ListItemIcon>\n                            <GitHubIcon />\n                        </ListItemIcon>\n                        <ListItemText primary='GitHub' />\n                    </ListItem>\n                </Link>\n\n                <ListItem button>\n                    <ListItemIcon>\n                        <AccountBoxIcon />\n                    </ListItemIcon>\n                    <ListItemText primary='About Me' />\n                </ListItem>\n            </List>\n            <ThemeSwitch />\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        edge=\"start\"\n                        onClick={handleDrawerToggle}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        実験室\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        container={container}\n                        variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        open={mobileOpen}\n                        onClose={handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                <MyWork />\n            </main>\n        </div>\n    );\n}\n","import React from 'react';\nimport Main from './Main';\nimport { CssBaseline, createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport { lightBlue, pink } from '@material-ui/core/colors';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../redux/reducers';\n\nconst App: React.FC = () => {\n  const isDarktheme = useSelector<RootState, boolean>(state => state.toggleTheme.isDarktheme);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: isDarktheme ? 'dark' : 'light',\n      primary: {\n        main: lightBlue.A400,\n      },\n      secondary: {\n        main: pink.A200,\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Main />\n    </ThemeProvider>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}