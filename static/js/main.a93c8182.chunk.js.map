{"version":3,"sources":["redux/reducers/toggleTheme.tsx","redux/reducers/index.tsx","redux/actionTypes.tsx","redux/store.tsx","component/Header.tsx","redux/actions.tsx","component/SideMenu.tsx","component/MyWork.tsx","component/Main.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","isDarktheme","window","matchMedia","matches","rootReducer","combineReducers","toggleTheme","state","action","type","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","useStyles","makeStyles","theme","createStyles","root","textAlign","switch","Header","useSelector","dispatch","useDispatch","classes","className","Switch","checked","color","inputProps","onClick","width","backgroundColor","palette","background","paper","alignContent","SideMenu","List","component","aria-label","ListItem","button","ListItemIcon","ListItemText","primary","Divider","marginBottom","title","content","display","MyWork","Card","CardContent","Typography","variant","CardActions","href","Button","size","Grid","container","spacing","item","xs","App","createMuiTheme","main","lightBlue","A400","secondary","pink","A200","ThemeProvider","CssBaseline","Main","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a93c8182.chunk.js","sourcesContent":["import { TOGGLE_THEME, ToggleThemeTypes } from './../actionTypes';\n\nconst initialState = {\n    isDarktheme: window.matchMedia('(prefers-color-scheme: dark)').matches ? true : false,\n}\n\nexport default function (state = initialState, action: ToggleThemeTypes) {\n    switch (action.type) {\n        case TOGGLE_THEME: {\n            return {\n                isDarktheme: !state.isDarktheme,\n            };\n        }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport toggleTheme from './toggleTheme';\n\nexport const rootReducer = combineReducers({ toggleTheme: toggleTheme });\nexport type RootState = ReturnType<typeof rootReducer>\n","export const TOGGLE_THEME = \"TOGGLE_THEME\";\n\ninterface ToggleThemeAction {\n    type: typeof TOGGLE_THEME,\n};\n\nexport type ToggleThemeTypes = ToggleThemeAction;","import { createStore, compose } from 'redux';\nimport { rootReducer } from './reducers';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers())\n\nexport default store;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../redux/reducers';\nimport Switch from '@material-ui/core/Switch';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { toggleTheme } from '../redux/actions';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            textAlign: 'center',\n        },\n        switch: {\n            textAlign: 'right',\n        },\n    }),\n);\n\nconst Header: React.FC = () => {\n    const isDarktheme = useSelector<RootState, boolean>(state => state.toggleTheme.isDarktheme);\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.switch}>\n                <Switch\n                    checked={isDarktheme}\n                    color=\"default\"\n                    inputProps={{ 'aria-label': 'checkbox with default color' }}\n                    onClick={() => dispatch(toggleTheme())}\n                />\n            </div>\n            <h1>こんにちは</h1>\n            <p>これから色々書いていく予定</p>\n        </div>\n    );\n}\n\nexport default Header;","import { TOGGLE_THEME } from './actionTypes';\n\nexport const toggleTheme = () => ({\n    type: TOGGLE_THEME,\n});","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport StarIcon from '@material-ui/icons/Star';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport PhotoIcon from '@material-ui/icons/Photo';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '90%',\n            // maxWidth: 360,\n            backgroundColor: theme.palette.background.paper,\n            alignContent: 'center',\n        },\n    }),\n);\n\nconst SideMenu: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root} >\n            <List component=\"nav\" aria-label=\"main mailbox folders\">\n                <ListItem button>\n                    <ListItemIcon>\n                        <StarIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Favorite\" />\n                </ListItem>\n                <ListItem button>\n                    <ListItemIcon>\n                        <PhotoIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Photo\" />\n                </ListItem>\n                <ListItem button>\n                    <ListItemIcon>\n                        <AccountBoxIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"About me\" />\n                </ListItem>\n            </List>\n            <Divider />\n            <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n                <ListItem button>\n                    <ListItemText primary=\"Menuになる予定だけどまだなにもない\" />\n                </ListItem>\n            </List>\n        </div>\n    );\n}\n\nexport default SideMenu;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '95%',\n        textAlign: 'left',\n        marginBottom: 14,\n    },\n    title: {\n        marginBottom: 14,\n    },\n    content: {\n        display: 'inline-block',\n        color: \"textSecondary\",\n    },\n});\n\nconst MyWork: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} variant=\"h5\" component=\"h2\">\n                        DP Visualizer\n                </Typography>\n                    <Typography className={classes.content} variant=\"body2\" component=\"p\">\n                        ナップサック問題のDPテーブルの更新をJSで可視化したやつ。\n                </Typography>\n                </CardContent>\n                <CardActions>\n                    <a href=\"https://yokotani92.github.io/dp-visualizer/\">\n                        <Button size=\"small\">VIEW</Button>\n                    </a>\n                </CardActions>\n            </Card>\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} variant=\"h5\" component=\"h2\">\n                        DP Visualizer\n                    </Typography>\n                    <Typography className={classes.content} variant=\"body2\" component=\"p\">\n                        React-Reduxを使ったCount up/ downボタン。\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <a href=\"https://yokotani92.github.io/react-redux-starter-app/\">\n                        <Button size=\"small\">VIEW</Button>\n                    </a>\n                </CardActions>\n            </Card>\n        </div>\n    );\n}\n\nexport default MyWork;\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport SideMenu from './SideMenu';\nimport MyWork from './MyWork';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            textAlign: 'center',\n        },\n    }),\n);\n\nconst Header: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={0}>\n                <Grid item xs={3}>\n                    <SideMenu />\n                </Grid>\n                <Grid item xs={9}>\n                    <MyWork />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport { CssBaseline, createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport { lightBlue, pink } from '@material-ui/core/colors';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../redux/reducers';\n\nconst App: React.FC = () => {\n  const isDarktheme = useSelector<RootState, boolean>(state => state.toggleTheme.isDarktheme);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: isDarktheme ? 'dark' : 'light',\n      primary: {\n        main: lightBlue.A400,\n      },\n      secondary: {\n        main: pink.A200,\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Header />\n      <Main />\n    </ThemeProvider>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}